{"meta":{"title":"Rainbow's blog","subtitle":"","description":"","author":"Rainbow","url":"http://example.com","root":"/"},"pages":[{"title":"Category","date":"2023-02-23T02:57:45.025Z","updated":"2023-02-23T02:57:45.025Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2023-02-23T02:58:16.976Z","updated":"2023-02-23T02:58:16.976Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"Tags","date":"2023-02-23T02:57:18.728Z","updated":"2023-02-23T02:57:18.728Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2023-02-23T01:40:06.859Z","updated":"2023-02-23T01:40:06.859Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-02-22T23:53:45.607Z","updated":"2023-02-22T23:53:45.607Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Golang Basics Notes","slug":"Go_Learning","date":"2023-03-27T20:52:19.003Z","updated":"2023-03-31T04:57:58.944Z","comments":true,"path":"2023/03/27/Go_Learning/","link":"","permalink":"http://example.com/2023/03/27/Go_Learning/","excerpt":"","text":"1 First Go program 1234567package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;hello, world!&quot;)&#125; Using 1go run hello.go or 12go build hello.go./hello to run this program. 2 Go Variables There are 2 ways to declaring variables 123var variableName type = valuevariableName := value In Go, all variables are initialized. If not initialized, the variable will be set to the default value of its type. var := inside and ourside function only inside function declaration and value assignment CAN be separately declaration and value assignment CANNOT be separately Declare multiple variables 12345678910var a, b int = 1, 2var c, d = &quot;test&quot;, 3e, f := &quot;test1&quot;, 3// in a blockvar ( g int h int = 1 i string = &quot;III&quot;) Go Constants 12345678910111213// syntaxconst CONSTNAME type = value// typed and untypedconst A int = 1const B = 2// multi constants declarationconst ( C int = 1 D = 2.4 E = &quot;test&quot;) Rules Usually written in uppercase letters Can be declared both inside and outside of a function Go output 123fmt.Print(&quot;x&quot;)fmt.Println(&quot;Xy&quot;)fmt.Printf(&quot;%v&quot;, 1) Formatting verbs Verb Description %v print value %#v print value in Go syntax format %T print the type of value %% print % Also there are integer formatting verbs, string formatting verbs, boolean formatting verbs and float formatting verbs. Go Arrays 1234567891011// syntaxvar array_name = [length]datatype&#123;values&#125;var a = [3]int&#123;1, 2, 3&#125;var array_name = [...]datatype&#123;values&#125;var b = [...]int&#123;1, 2, 3&#125;array_name := [length]datatype&#123;values&#125;c := [3]int&#123;1, 2, 3&#125;c[0] = 2fmt.Println(c[0]) Array initialization 123456// not initarr1 := [3]int&#123;&#125;//partially initarr2 := [3]int&#123;1,2&#125;// fully initarr3 := [2]int&#123;1,2&#125; Init only specific elements 12// assign 10 to index2 arr1 := [3]int&#123;2:10&#125; Find the length of an array 1fmt.Println(len(arr1)) Go slices 12//Syntaxslice_name := []datatype&#123;&#125; len(arr): return slice length cap(arr): return slice capacity Create a slice from an array 12// end exclusivemySlice := myArray[start:end] Create slices with the make() function 1234slice_name := make([]type, length, capacity)// with omitted capacity, capacity is equal to lengthslice_name := make([]type, length) Append elements to a slice 1234//syntaxslice_name = append(slice_name, element1, element2, ...)slice1 = append(slice2, slice3...) The … after slice3 is necessary when appending the elemetns of one slice to another. Memory efficiency 12//syntaxcopy(dest, src) Go Operators Arithmetic operators Assignment operators Comparison operators Logical operators Bitwise operators Go Conditions If statement 12345678//syntaxif condition &#123; //code&#125; else if new condition &#123; // new code&#125; else &#123; // new code&#125; Switch case 123456789//syntaxswitch expression &#123; case x: //code case y: //code default: //code&#125; Don’t add break Go loops For loop 1234// syntaxfor statement1; statement2; statement3 &#123; //code&#125; The range keyword 1234// syntaxfor index, value := range array or slice or map &#123; // code&#125; Go function 12345// syntaxfunc FunctionName(param type, param2 type) type &#123; //code return output&#125; Named return values 123456func functionName (x int, y int) (result int, result1 int) &#123; result = x + y result1 = x - y return&#125; Recursion 12345678func test(x int) int &#123; if x == 11 &#123; return 0 &#125; fmt.Println(x) return test(x + 1)&#125; Go Struct 123456type structName struct &#123; member1 datatype member2 datatype ...&#125; Access structure members 123var per1 personper1.name = &quot;TestName&quot;per1.age = 24 structure can be function arguments Go Maps 123//syntaxvar a = map[keyType]ValueType&#123;key1:value1, key2:value2,...&#125;b := map[keyType]ValueType&#123;key1:value1, key2:value2,...&#125;","categories":[{"name":"Technology","slug":"Technology","permalink":"http://example.com/categories/Technology/"}],"tags":[{"name":"Program skills","slug":"Program-skills","permalink":"http://example.com/tags/Program-skills/"}]},{"title":"Microservice learning","slug":"Microservice","date":"2023-02-27T03:48:20.542Z","updated":"2023-02-27T04:01:17.400Z","comments":true,"path":"2023/02/26/Microservice/","link":"","permalink":"http://example.com/2023/02/26/Microservice/","excerpt":"","text":"References https://www.youtube.com/watch?v=fR1Qof1peBs Traditional C/S Pack of macro services if one service needs update, all system need to be deployed again Microservice Many independent small services Every service handles a small feature Micro services communicate with each other by APIs Can be deployed independently Responsible for persisting their own data or external state Benefits of Microservices Agility Isolation Data isolation fault isolation Mix of technologies Scalability Challenges Complexity Skill sets for distributed system Development and testing Lack of governance Network congestion and latency Data integrity","categories":[{"name":"Learning from videos","slug":"Learning-from-videos","permalink":"http://example.com/categories/Learning-from-videos/"}],"tags":[{"name":"System Design","slug":"System-Design","permalink":"http://example.com/tags/System-Design/"}]},{"title":"Conclusion of Video Debugging like a pro","slug":"Debug_like_a_Pro","date":"2023-02-24T23:12:17.751Z","updated":"2023-02-24T23:28:51.938Z","comments":true,"path":"2023/02/24/Debug_like_a_Pro/","link":"","permalink":"http://example.com/2023/02/24/Debug_like_a_Pro/","excerpt":"","text":"References Debuggig like a pro – ByteByteGo Mindset There is alwasy a logical explanation! Being stuck is temporarily! Know your limits and ask for help when needed. Prioritize bugs based on their potential impact and severity! Basics Collect details to REPRODUCE the issue: screen shots, logs, error messages Some strategies: Use print statements setup proper debugger What if we can’t reproduce the issue? Some bugs only appear under production loads Some bugs only appear in certain race conditions What to do with this: trace the code line by line, especially the failed call entire life cycle add logs to our code and deploy it to production and eventially get enough information and solve the issue. What if completely stuck? take a break think out loud ask for help from senior people","categories":[{"name":"Learning from videos","slug":"Learning-from-videos","permalink":"http://example.com/categories/Learning-from-videos/"}],"tags":[{"name":"Program skills","slug":"Program-skills","permalink":"http://example.com/tags/Program-skills/"}]},{"title":"What is Load Balancer?","slug":"Load_Balancer","date":"2023-02-23T20:28:45.741Z","updated":"2023-02-24T23:28:31.579Z","comments":true,"path":"2023/02/23/Load_Balancer/","link":"","permalink":"http://example.com/2023/02/23/Load_Balancer/","excerpt":"","text":"Why If a system is designed to fulfill large amounts of customer needs, a way to balance network loads must be applied. Typically, more servers will be added. But how to balance loads to each server? So a load balancer is needed as well. Features automatically activate or deactivate application servers Senarios Dumb senario: Round robin, but what if different users log in differently time length and lead to server usage unbalanced? Smart senario: choose the lease used app server. Why not always use this? Initial setup is more complex, and more expensive to use. Random select References https://www.youtube.com/watch?v=sCR3SAVdyCc&amp;t=48s","categories":[{"name":"Learning from videos","slug":"Learning-from-videos","permalink":"http://example.com/categories/Learning-from-videos/"}],"tags":[{"name":"System Design","slug":"System-Design","permalink":"http://example.com/tags/System-Design/"}]},{"title":"Vim cheat sheet","slug":"Vim_CheatSheet","date":"2023-02-23T03:34:27.926Z","updated":"2023-02-23T03:34:33.779Z","comments":true,"path":"2023/02/22/Vim_CheatSheet/","link":"","permalink":"http://example.com/2023/02/22/Vim_CheatSheet/","excerpt":"","text":"Movement Moving Horizontally Word By Word 123 ↑← h j k l → ↓ w word by word b word by word backward W WORD by WORD B WORD by WORD backward e jump to the end of the word ge jump to the end of previous word E jump to the end of of WORD gE jump to the end of previous WORD Move to a Sepcial Character f&#123;character&#125; find character forward F&#123;character&#125; find character backward t&#123;character&#125; after using f, type ; to find next match Moving Horizontally Extremely 0: Moves to the first character of a line ^: Moves to the first non-blank character of a line $: Moves to the end of a line g_: Moves to the non-blank character at the end of a line Moving Vertically Starting from k and j, we move on to a faster way of maneuvering vertically with: &#125; jumps entire paragraphs downwards &#123; similarly but upwards CTRL-D lets you move down half a page by scrolling the page CTRL-U lets you move up half a page also by scrolling High Precision Vertical Motions With Search Pattern /&#123;pattern&#125; to search forward ?&#123;pattern&#125; to search backwards use n to go to the next match use N to go to the next match after press ENTER press N or n Moving Faster With Counts Counts are numbers which let you multiply the effect of a command: 1&#123;count&#125;&#123;command&#125; And Some More Nifty Core Motions These are yet more motions that can come in handy from time to time: Type gg to go to the top of the file. Use &#123;line&#125;gg to go to a specific line. Use G to go to the end of the file. Type % jump to matching (&#123;[]&#125;). undo and redo u to undo ctrl+r to redo delete dd for delete line D for delete line from the cursor d{motion} - delete text covered by motion d2w =&gt; deletes two words dt; =&gt; delete until ; d/hello =&gt; delete until hello dd - delete line x delete at cursor d0 delete to start of line d$ delete to end of line d) delete to end of sentence dgg delete to start of file dG delete to end of file change change and insert example 123// d + i=&gt; wdtSipolite&lt;ESC&gt;fcdwipolitely&lt;ESPACE&gt;&lt;ESC&gt;// c =&gt; wctSpolite&lt;ESC&gt;fccwpolitely&lt;ESPACE&gt;&lt;ESC&gt;const politeSalute = &quot;I politely salute you good person.&quot;; cc change entire line C changes from the cursor until the end of the line dot repeat last change ci directly change text objects from anywhere of the line ciw cis cip ci&quot; also, ci{ or ci( can be applied 123456789101112 |- `a` means around |- `i` means inner / / /&#123;a|i&#125;&#123;text-object&#125; / / | w - word | s - sentence | p - paragraph | &quot; - quotes Other Operators In addition to d and c these are other useful operators: y (yank): Copy in Vim jargon p (put): Paste in Vim jargon g~ (switch case): Changes letters from lowercase to uppercase and back. Alternatively, use gu to make something lowercase and gU to make something uppercase &gt; (shift right): Adds indentation &lt; (shift left): Removes indentation = (format code): Formats code y and p is how you copy and paste things in Vim. Like d and c, y can be combined with motions and text objects to copy any text that you desire: More Short-hand Operators x is equivalent to dl and deletes the character under the cursor X is equivalent to dh and deletes the character before the cursor s is equivalent to ch, deletes the character under the cursor and puts you into Insert mode r allows you to replace one single character for another. Very handy to fix typos. ~ to switch case for a single character A nice way use case for x is to swap a couple of characters when you make a typo. You remove (and cut) a character with x and immediately paste it after the cursor with p. Try it!","categories":[{"name":"Vim","slug":"Vim","permalink":"http://example.com/categories/Vim/"}],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://example.com/tags/Tool/"},{"name":"Vim","slug":"Vim","permalink":"http://example.com/tags/Vim/"}]},{"title":"Process to build this blog","slug":"Blog_build","date":"2023-02-23T00:29:11.163Z","updated":"2023-02-23T03:19:50.996Z","comments":true,"path":"2023/02/22/Blog_build/","link":"","permalink":"http://example.com/2023/02/22/Blog_build/","excerpt":"","text":"Steps Follow the links in References References https://blog.csdn.net/yaorongke/article/details/119089190 https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html https://hexo.io/zh-cn/docs/github-pages.html https://blog.csdn.net/weixin_48927364/article/details/123405585 https://wuyi2.github.io/2020/02/12/使用Github-SSH-Key来避免Hexo部署时输入账户密码/","categories":[{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://example.com/tags/Blog/"}]}],"categories":[{"name":"Technology","slug":"Technology","permalink":"http://example.com/categories/Technology/"},{"name":"Learning from videos","slug":"Learning-from-videos","permalink":"http://example.com/categories/Learning-from-videos/"},{"name":"Vim","slug":"Vim","permalink":"http://example.com/categories/Vim/"},{"name":"Github","slug":"Github","permalink":"http://example.com/categories/Github/"}],"tags":[{"name":"Program skills","slug":"Program-skills","permalink":"http://example.com/tags/Program-skills/"},{"name":"System Design","slug":"System-Design","permalink":"http://example.com/tags/System-Design/"},{"name":"Tool","slug":"Tool","permalink":"http://example.com/tags/Tool/"},{"name":"Vim","slug":"Vim","permalink":"http://example.com/tags/Vim/"},{"name":"Blog","slug":"Blog","permalink":"http://example.com/tags/Blog/"}]}